'use strict';

var BN = require('bn.js');
var struct = require('varstruct');
var Int64BE = struct.Int64BE;

var VarInt = require('./varint.js');

var VarString = struct.VarString(VarInt);
var VarBuffer = struct.VarBuffer(VarInt);

var VarHexBuffer = {
  decode: function decode() {
    throw Error('Decode not implemented');
  },
  encode: function encode(value, buffer, offset) {
    value = Buffer.from(value, 'hex');
    var bytes = VarBuffer.encode(value, buffer, offset);
    VarHexBuffer.encode.bytes = VarBuffer.encode.bytes;
    return bytes;
  },
  encodingLength: function encodingLength(value) {
    var length = value.length / 2;
    return length + VarInt.encodingLength(length);
  }
};

var Time = {
  encode: function encode(value) {
    var date = new Date(value);
    var time = new BN(date.getTime());
    time.imuln(1e6);
    return Buffer.from(time.toString(16), 'hex');
  }
};

var BlockID = struct([{
  name: 'hash',
  type: VarHexBuffer
}, {
  name: 'parts',
  type: struct([{ name: 'total', type: VarInt }, { name: 'hash', type: VarHexBuffer }])
}]);

var TreeHashInput = struct([{ name: 'left', type: VarBuffer }, { name: 'right', type: VarBuffer }]);

var PubKey = {
  decode: function decode(buffer) {
    var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : buffer.length;

    throw Error('Decode not implemented');
  },
  encode: function encode(pub, buffer) {
    var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var length = PubKey.encodingLength(pub);
    buffer = buffer || Buffer.alloc(length);
    if (pub == null) {
      buffer[offset] = 0;
    } else {
      buffer[offset] = 1;
      Buffer.from(pub.data, 'hex').copy(buffer, offset + 1);
    }
    PubKey.encode.bytes = length;
    return buffer;
  },
  encodingLength: function encodingLength(pub) {
    if (pub == null) return 1;
    return 33;
  }
};

var ValidatorHashInput = struct([{ name: 'address', type: VarHexBuffer }, { name: 'pub_key', type: PubKey }, { name: 'voting_power', type: Int64BE }]);

module.exports = {
  VarInt: VarInt,
  VarString: VarString,
  VarBuffer: VarBuffer,
  VarHexBuffer: VarHexBuffer,
  Time: Time,
  BlockID: BlockID,
  TreeHashInput: TreeHashInput,
  ValidatorHashInput: ValidatorHashInput,
  PubKey: PubKey,
  Int64BE: Int64BE
};